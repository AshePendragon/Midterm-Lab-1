package myPackage;
public class Main {
    public static void main(String[] args) {

        Shape[] shapes = {
            new Circle(5),
            new Rectangle(10, 6)
        };

        for (Shape shape : shapes) {
            shape.displayShape();

            if (shape instanceof Drawable) {
                ((Drawable) shape).draw();
            }

            System.out.println("Area: " + shape.getArea());
            System.out.println();
        }

        Drawable unknownShape = new Drawable() {
            @Override
            public void draw() {
                System.out.println("Drawing an unknown shape anonymously.");
            }
        };
        unknownShape.draw();

        MessagePrinter printer = msg -> System.out.println(msg);
        printer.printMessage("Drawing completed using lambda expression!");
    }
}


package myPackage;
abstract class Shape {
    abstract double getArea();

    void displayShape() {
        System.out.println("This is a shape.");
    }
}

class Circle extends Shape implements Drawable {
    private double radius;

    Circle(double radius) {
        this.radius = radius;
    }

    @Override
    double getArea() {
        return Math.PI * radius * radius;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a circle using a compass.");
    }
}

class Rectangle extends Shape implements Drawable {
    private double length;
    private double width;

    Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    @Override
    double getArea() {
        return length * width;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a rectangle using a ruler.");
    }
}

interface Drawable {
    void draw();
}

@FunctionalInterface
interface MessagePrinter {
    void printMessage(String msg);
}
